service: mail-delivery-demo
frameworkVersion: "3"

plugins:
  - serverless-deployment-bucket
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-ignore
  - serverless-prune-plugin
  - serverless-python-requirements

useDotenv: true
custom:
  default:
    stage: dev

  serverless-offline:
    httpPort: 3333
    noPrependStageInUrl: true

  prune:
    automatic: true
    number: 3

  pythonRequirements:
    usePoetry: true
    noDeploy:
      - pytest
      - boto3
      - black
      - mypy
      - isort
      - flake8
      - taskipy

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Project
        Value: python-api-test
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, self:custom.default.stage}
  environment:
    TZ: Asia/Tokyo
    STAGE: ${opt:stage, self:custom.default.stage}
    DEPLOY_REGION: ${opt:region, 'ap-northeast-1'}
    DYNAMODB_URL: ${env:DYNAMODB_URL}
    SQS_QUEUE_URL: { "Ref": "MailQueue" }
    SES_REGION: ${opt:region, 'ap-northeast-1'}
  region: ${DEPLOY_REGION}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:*"
          Resource:
            - "*"

        - Effect: Allow
          Action:
            - "s3:*"
          Resource:
            - "*"

        - Effect: Allow
          Action:
            - "ses:*"
          Resource:
            - "*"

  versionFunctions: false

  deploymentBucket:
    name: ${self:service}-bucket-${self:provider.stage}
    serverSideEncryption: AES256

package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - ./**
  include:
    - ./src/**
    - ./.env

functions:
  ApplicationApiHandler:
    description: ${self:service} API
    handler: src/handlers/app.lambda_handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
